db.createCollection("Rides", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["driver_id", "passenger_id", "start_location", "end_location", "distance", "ride_time", "fare"],
      properties: {
        driver_id: { bsonType: "objectid" }, 
        passenger_id: { bsonType: "objectid" }, 
        start_location: { bsonType: "string" },
        end_location: { bsonType: "string" },
        distance: { bsonType: "double" },
        ride_time: { bsonType: "double" },
        fare: { bsonType: "double" }
      }
    }
  }
});


db.Rides.insertMany([
  {
    driver_id: ObjectId("64d624dd865d9e5f9a1e0ef2"),
    passenger_id: ObjectId("64d624dd865d9e5f9a1e0ef3"),
    start_location: "Airport",
    end_location: "City Center",
    distance: 15.2,
    ride_time: 35,
    fare: 20.50
  },
  {
    driver_id: ObjectId("64d624dd865d9e5f9a1e0ef4"),
    passenger_id: ObjectId("64d624dd865d9e5f9a1e0ef5"),
    start_location: "Suburbia",
    end_location: "Shopping Mall",
    distance: 8.7,
    ride_time: 20,
    fare: 12.25
  },
  {
    driver_id: ObjectId("64d624dd865d9e5f9a1e0ef6"),
    passenger_id: ObjectId("64d624dd865d9e5f9a1e0ef7"),
    start_location: "Downtown",
    end_location: "Park",
    distance: 3.0,
    ride_time: 10,
    fare: 8.00
  },
  {
    driver_id: ObjectId("64d624dd865d9e5f9a1e0ef8"),
    passenger_id: ObjectId("64d624dd865d9e5f9a1e0ef9"),
    start_location: "City Center",
    end_location: "Beach",
    distance: 12.5,
    ride_time: 30,
    fare: 18.75
  },
  {
    driver_id: ObjectId("64d624dd865d9e5f9a1e0efa"),
    passenger_id: ObjectId("64d624dd865d9e5f9a1e0efb"),
    start_location: "Suburbia",
    end_location: "Restaurant",
    distance: 5.0,
    ride_time: 15,
    fare: 10.00
  }
]);


db.Rides.find().sort({ fare: -1 }).limit(1);




//********************************************************************************************************
// // Problem 36: Find the ride with the highest and lowest fare:
// db.Rides.find().sort({ fare: -1 }).limit(1);

// // Lowest Fare
// db.Rides.find().sort({ fare: 1 }).limit(1);


// // Problem 37: Find the average fare and distance for each driver_id:
// db.Rides.aggregate([
//   {
//     $group: {
//       _id: "$driver_id",
//       averageFare: { $avg: "$fare" },
//       averageDistance: { $avg: "$distance" }
//     }
//   }
// ]);


// // Problem 38: Find driver_id that have completed more than 5 rides:
// db.Rides.aggregate([
//   {
//     $group: {
//       _id: "$driver_id",
//       totalRides: { $sum: 1 }
//     }
//   },
//   {
//     $match: {
//       totalRides: { $gt: 5 }
//     }
//   }
// ]);


// // Problem 39: Find the name of the driver with the highest fare:
// db.Rides.aggregate([
//   {
//     $sort: { fare: -1 }
//   },
//   {
//     $limit: 1
//   },
//   {
//     $lookup: {
//       from: "Drivers", // Assuming the collection is called Drivers
//       localField: "driver_id",
//       foreignField: "driver_id",
//       as: "driverInfo"
//     }
//   },
//   {
//     $unwind: "$driverInfo"
//   },
//   {
//     $project: {
//       driverName: "$driverInfo.name"
//     }
//   }
// ]);


// // Problem 40: Find the top 3 drivers who have earned the most from fares:
// db.Rides.aggregate([
//   {
//     $group: {
//       _id: "$driver_id",
//       totalEarnings: { $sum: "$fare" }
//     }
//   },
//   {
//     $sort: { totalEarnings: -1 }
//   },
//   {
//     $limit: 3
//   },
//   {
//     $project: {
//       driver_id: "$_id",
//       totalEarnings: 1
//     }
//   }
// ]);


// // Problem 41: Find rides that happened in the last 7 days:
// var sevenDaysAgo = new Date();
// sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

// db.Rides.find({
//   ride_date: { $gte: sevenDaysAgo }
// });



// // Problem 42: Find all rides where the end_location is not set:
// db.Rides.find({
//   end_location: { $exists: false }
// });


// // Problem 43: Calculate fare per mile for each ride and order by fare per mile:
// db.Rides.aggregate([
//   {
//     $addFields: {
//       farePerMile: { $divide: ["$fare", "$distance"] }
//     }
//   },
//   {
//     $sort: { farePerMile: -1 }
//   }
// ]);


// // Problem 44: List of all rides including driver's and passenger's name:
// db.Rides.aggregate([
//   {
//     $lookup: {
//       from: "Drivers", // Assuming the collection is called Drivers
//       localField: "driver_id",
//       foreignField: "driver_id",
//       as: "driverInfo"
//     }
//   },
//   {
//     $lookup: {
//       from: "Passengers", // Assuming the collection is called Passengers
//       localField: "passenger_id",
//       foreignField: "passenger_id",
//       as: "passengerInfo"
//     }
//   },
//   {
//     $unwind: "$driverInfo"
//   },
//   {
//     $unwind: "$passengerInfo"
//   },
//   {
//     $project: {
//       _id: 0,
//       ride_id: "$_id",
//       driverName: "$driverInfo.name",
//       passengerName: "$passengerInfo.name",
//       start_location: 1,
//       end_location: 1,
//       distance: 1,
//       ride_time: 1,
//       fare: 1
//     }
//   }
// ]);


// // Problem 45: Add a tip field to the Rides table / collection:
// db.Rides.updateMany({}, { $set: { tip: 0 } });